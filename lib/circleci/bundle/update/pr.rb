require "circleci/bundle/update/pr/version"
require "octokit"
require "compare_linker"

module Circleci
  module Bundle
    module Update
      module Pr
        def self.create_if_needed(git_username: nil, git_email: nil, git_branches: ["master"])
          raise "$CIRCLE_PROJECT_USERNAME isn't set" unless ENV['CIRCLE_PROJECT_USERNAME']
          raise "$CIRCLE_PROJECT_REPONAME isn't set" unless ENV['CIRCLE_PROJECT_REPONAME']
          raise "$GITHUB_ACCESS_TOKEN isn't set" unless ENV['GITHUB_ACCESS_TOKEN']
          return unless need?(git_branches)
          repo_full_name = "#{ENV['CIRCLE_PROJECT_USERNAME']}/#{ENV['CIRCLE_PROJECT_REPONAME']}"
          now = Time.now
          branch = "bundle-update-#{now.strftime('%Y%m%d%H%M%S')}"

          git_username ||= client.user.login
          git_email ||= "#{git_username}@users.noreply.github.com"

          # https://circleci.com/docs/1.0/environment-variables/
          # https://circleci.com/docs/2.0/env-vars/
          # circle-enterprise
          #  Using build environment variables:
          #  BASH_ENV=/tmp/.bash_env-5ac723c3958a150019da2492-0-build
          #  CIRCLE_BUILD_URL=https://circle2.medpeer.co.jp/gh/medpeer-inc/medpeer/8620
          #  # ok(but pr trigger only)
          #  CIRCLE_COMPARE_URL=https://github.medpeer.co.jp/medpeer-inc/medpeer/compare/e9a8ba83e567...fdade136a243
          #  CIRCLE_PROJECT_REPONAME=medpeer
          #  CIRCLE_PROJECT_USERNAME=medpeer-inc
          #  # 2.0 only
          #  CIRCLE_PULL_REQUEST=https://github.medpeer.co.jp/medpeer-inc/medpeer/pull/2681
          #  # 2.0 only
          #  CIRCLE_PULL_REQUESTS=https://github.medpeer.co.jp/medpeer-inc/medpeer/pull/2681
          #  # ok
          #  # https://discuss.circleci.com/t/circle-repository-url-changed-format-in-v2/15273
          #  CIRCLE_REPOSITORY_URL=git@github.medpeer.co.jp:medpeer-inc/medpeer.git
          #  # ok (backword for 1.0)
          #  CI_PULL_REQUEST=https://github.medpeer.co.jp/medpeer-inc/medpeer/pull/2681
          #  # ok (backword for 1.0)
          #  CI_PULL_REQUESTS=https://github.medpeer.co.jp/medpeer-inc/medpeer/pull/2681
          create_branch(git_username, git_email, branch, repo_full_name)
          pull_request = create_pull_request(repo_full_name, branch, now)
          add_comment_of_compare_linker(repo_full_name, pull_request[:number])
        end

        def self.need?(git_branches)
p "git_branches "
p git_branches 
p "ENV['CIRCLE_BRANCH']"
p ENV['CIRCLE_BRANCH']
          return false unless git_branches.include?(ENV['CIRCLE_BRANCH'])
          unless system("bundle update && bundle update --ruby")
            raise "Unable to execute `bundle update && bundle update --ruby`"
          end
          `git status -sb 2> /dev/null`.include?("Gemfile.lock")
        end
        private_class_method :need?

        def self.create_branch(git_username, git_email, branch, repo_full_name)
          remote = "https://#{github_access_token}@#{github_host}/#{repo_full_name}"
          p "remote:"
          p remote
          system("git remote add github-url-with-token #{remote}")
          system("git config user.name #{git_username}")
          system("git config user.email #{git_email}")
          system("git add Gemfile.lock")
          system("git commit -m '$ bundle update && bundle update --ruby'")
          system("git branch -M #{branch}")
          system("git push -q github-url-with-token #{branch}")
        end
        private_class_method :create_branch

        def self.create_pull_request(repo_full_name, branch, now)
          title = "bundle update at #{now.strftime('%Y-%m-%d %H:%M:%S %Z')}"
          uri = URI.parse CIRCLE_BUILD_URL
          body = "auto generated by [CircleCI of #{ENV['CIRCLE_PROJECT_REPONAME']}](https://#{uri.host}/gh/#{repo_full_name})"
          client.create_pull_request(repo_full_name, ENV['CIRCLE_BRANCH'], branch, title, body)
        end
        private_class_method :create_pull_request

        def self.add_comment_of_compare_linker(repo_full_name, pr_number)
          ENV["OCTOKIT_ACCESS_TOKEN"] = ENV["GITHUB_ACCESS_TOKEN"]
          ENV["ENTERPRISE_OCTOKIT_ACCESS_TOKEN"] = ENV["GITHUB_ENTERPRISE_ACCESS_TOKEN"]
          ENV["ENTERPRISE_OCTOKIT_API_ENDPOINT"] = ENV["GITHUB_ENTERPRISE_API_ENDPOINT"]
          compare_linker = CompareLinker.new(repo_full_name, pr_number)
          compare_linker.formatter = CompareLinker::Formatter::Markdown.new

          comment = <<-EOC
**Updated RubyGems:**

#{compare_linker.make_compare_links.to_a.join("\n")}

Powered by [compare_linker](https://rubygems.org/gems/compare_linker)
          EOC
          compare_linker.add_comment(repo_full_name, pr_number, comment)
        end
        private_class_method :add_comment_of_compare_linker

        def self.client
          ENV['GITHUB_ENTERPRISE_API_ENDPOINT'] ? enterprise_client : default_client
        end

        def self.default_client
          Octokit::Client.new(access_token: ENV['GITHUB_ACCESS_TOKEN'])
        end

        def self.enterprise_client
          Octokit::Client.new(access_token: ENV['GITHUB_ENTERPRISE_ACCESS_TOKEN'], 
                              api_endpoint: ENV['GITHUB_ENTERPRISE_API_ENDPOINT'])
        end

        def self.github_access_token
          ENV['GITHUB_ENTERPRISE_ACCESS_TOKEN'] || ENV['GITHUB_ACCESS_TOKEN']
        end

        def self.github_host
          # A format like git@github.com:masutaka/compare_linker.git
          return $1 if ENV['CIRCLE_REPOSITORY_URL'] =~ %r{([^@]+?)[/:]}
          p 'CIRCLE_REPOSITORY_URL regexp 1 skip' 
          # A format like https://github.com/Linuxbrew/homebrew-extra.git
          return $1 if ENV['CIRCLE_REPOSITORY_URL'] =~ %r{https://(.+?)/}
          p 'CIRCLE_REPOSITORY_URL regexp 2 skip' 
          'github.com'
        end

        private_class_method :client
      end
    end
  end
end
